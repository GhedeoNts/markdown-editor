{"version":3,"file":"jinja2.0dae6299.js","sources":["../../../node_modules/@codemirror/legacy-modes/mode/jinja2.js"],"sourcesContent":["var keywords = [\"and\", \"as\", \"block\", \"endblock\", \"by\", \"cycle\", \"debug\", \"else\", \"elif\",\n                \"extends\", \"filter\", \"endfilter\", \"firstof\", \"for\",\n                \"endfor\", \"if\", \"endif\", \"ifchanged\", \"endifchanged\",\n                \"ifequal\", \"endifequal\", \"ifnotequal\",\n                \"endifnotequal\", \"in\", \"include\", \"load\", \"not\", \"now\", \"or\",\n                \"parsed\", \"regroup\", \"reversed\", \"spaceless\",\n                \"endspaceless\", \"ssi\", \"templatetag\", \"openblock\",\n                \"closeblock\", \"openvariable\", \"closevariable\",\n                \"openbrace\", \"closebrace\", \"opencomment\",\n                \"closecomment\", \"widthratio\", \"url\", \"with\", \"endwith\",\n                \"get_current_language\", \"trans\", \"endtrans\", \"noop\", \"blocktrans\",\n                \"endblocktrans\", \"get_available_languages\",\n                \"get_current_language_bidi\", \"plural\"],\n    operator = /^[+\\-*&%=<>!?|~^]/,\n    sign = /^[:\\[\\(\\{]/,\n    atom = [\"true\", \"false\"],\n    number = /^(\\d[+\\-\\*\\/])?\\d+(\\.\\d+)?/;\n\nkeywords = new RegExp(\"((\" + keywords.join(\")|(\") + \"))\\\\b\");\natom = new RegExp(\"((\" + atom.join(\")|(\") + \"))\\\\b\");\n\nfunction tokenBase (stream, state) {\n  var ch = stream.peek();\n\n  //Comment\n  if (state.incomment) {\n    if(!stream.skipTo(\"#}\")) {\n      stream.skipToEnd();\n    } else {\n      stream.eatWhile(/\\#|}/);\n      state.incomment = false;\n    }\n    return \"comment\";\n    //Tag\n  } else if (state.intag) {\n    //After operator\n    if(state.operator) {\n      state.operator = false;\n      if(stream.match(atom)) {\n        return \"atom\";\n      }\n      if(stream.match(number)) {\n        return \"number\";\n      }\n    }\n    //After sign\n    if(state.sign) {\n      state.sign = false;\n      if(stream.match(atom)) {\n        return \"atom\";\n      }\n      if(stream.match(number)) {\n        return \"number\";\n      }\n    }\n\n    if(state.instring) {\n      if(ch == state.instring) {\n        state.instring = false;\n      }\n      stream.next();\n      return \"string\";\n    } else if(ch == \"'\" || ch == '\"') {\n      state.instring = ch;\n      stream.next();\n      return \"string\";\n    } else if(stream.match(state.intag + \"}\") || stream.eat(\"-\") && stream.match(state.intag + \"}\")) {\n      state.intag = false;\n      return \"tag\";\n    } else if(stream.match(operator)) {\n      state.operator = true;\n      return \"operator\";\n    } else if(stream.match(sign)) {\n      state.sign = true;\n    } else {\n      if(stream.eat(\" \") || stream.sol()) {\n        if(stream.match(keywords)) {\n          return \"keyword\";\n        }\n        if(stream.match(atom)) {\n          return \"atom\";\n        }\n        if(stream.match(number)) {\n          return \"number\";\n        }\n        if(stream.sol()) {\n          stream.next();\n        }\n      } else {\n        stream.next();\n      }\n\n    }\n    return \"variable\";\n  } else if (stream.eat(\"{\")) {\n    if (stream.eat(\"#\")) {\n      state.incomment = true;\n      if(!stream.skipTo(\"#}\")) {\n        stream.skipToEnd();\n      } else {\n        stream.eatWhile(/\\#|}/);\n        state.incomment = false;\n      }\n      return \"comment\";\n      //Open tag\n    } else if (ch = stream.eat(/\\{|%/)) {\n      //Cache close tag\n      state.intag = ch;\n      if(ch == \"{\") {\n        state.intag = \"}\";\n      }\n      stream.eat(\"-\");\n      return \"tag\";\n    }\n  }\n  stream.next();\n};\n\nexport const jinja2 = {\n  startState: function () {\n    return {tokenize: tokenBase};\n  },\n  token: function (stream, state) {\n    return state.tokenize(stream, state);\n  },\n  languageData: {\n    commentTokens: {block: {open: \"{#\", close: \"#}\"}}\n  }\n};\n"],"names":["keywords","operator","sign","atom","number","tokenBase","stream","state","ch","jinja2"],"mappings":"AAAA,IAAIA,EAAW,CAAC,MAAO,KAAM,QAAS,WAAY,KAAM,QAAS,QAAS,OAAQ,OAClE,UAAW,SAAU,YAAa,UAAW,MAC7C,SAAU,KAAM,QAAS,YAAa,eACtC,UAAW,aAAc,aACzB,gBAAiB,KAAM,UAAW,OAAQ,MAAO,MAAO,KACxD,SAAU,UAAW,WAAY,YACjC,eAAgB,MAAO,cAAe,YACtC,aAAc,eAAgB,gBAC9B,YAAa,aAAc,cAC3B,eAAgB,aAAc,MAAO,OAAQ,UAC7C,uBAAwB,QAAS,WAAY,OAAQ,aACrD,gBAAiB,0BACjB,4BAA6B,QAAQ,EACjDC,EAAW,oBACXC,EAAO,aACPC,EAAO,CAAC,OAAQ,OAAO,EACvBC,EAAS,6BAEbJ,EAAW,IAAI,OAAO,KAAOA,EAAS,KAAK,KAAK,EAAI,OAAO,EAC3DG,EAAO,IAAI,OAAO,KAAOA,EAAK,KAAK,KAAK,EAAI,OAAO,EAEnD,SAASE,EAAWC,EAAQC,EAAO,CACjC,IAAIC,EAAKF,EAAO,OAGhB,GAAIC,EAAM,UACR,OAAID,EAAO,OAAO,IAAI,GAGpBA,EAAO,SAAS,MAAM,EACtBC,EAAM,UAAY,IAHlBD,EAAO,UAAS,EAKX,UAEF,GAAIC,EAAM,MAAO,CAEtB,GAAGA,EAAM,SAAU,CAEjB,GADAA,EAAM,SAAW,GACdD,EAAO,MAAMH,CAAI,EAClB,MAAO,OAET,GAAGG,EAAO,MAAMF,CAAM,EACpB,MAAO,QAEV,CAED,GAAGG,EAAM,KAAM,CAEb,GADAA,EAAM,KAAO,GACVD,EAAO,MAAMH,CAAI,EAClB,MAAO,OAET,GAAGG,EAAO,MAAMF,CAAM,EACpB,MAAO,QAEV,CAED,GAAGG,EAAM,SACP,OAAGC,GAAMD,EAAM,WACbA,EAAM,SAAW,IAEnBD,EAAO,KAAI,EACJ,SACF,GAAGE,GAAM,KAAOA,GAAM,IAC3B,OAAAD,EAAM,SAAWC,EACjBF,EAAO,KAAI,EACJ,SACF,GAAGA,EAAO,MAAMC,EAAM,MAAQ,GAAG,GAAKD,EAAO,IAAI,GAAG,GAAKA,EAAO,MAAMC,EAAM,MAAQ,GAAG,EAC5F,OAAAA,EAAM,MAAQ,GACP,MACF,GAAGD,EAAO,MAAML,CAAQ,EAC7B,OAAAM,EAAM,SAAW,GACV,WACF,GAAGD,EAAO,MAAMJ,CAAI,EACzBK,EAAM,KAAO,WAEVD,EAAO,IAAI,GAAG,GAAKA,EAAO,IAAG,EAAI,CAClC,GAAGA,EAAO,MAAMN,CAAQ,EACtB,MAAO,UAET,GAAGM,EAAO,MAAMH,CAAI,EAClB,MAAO,OAET,GAAGG,EAAO,MAAMF,CAAM,EACpB,MAAO,SAENE,EAAO,OACRA,EAAO,KAAI,CAErB,MACQA,EAAO,KAAI,EAIf,MAAO,UACR,SAAUA,EAAO,IAAI,GAAG,EAAG,CAC1B,GAAIA,EAAO,IAAI,GAAG,EAChB,OAAAC,EAAM,UAAY,GACdD,EAAO,OAAO,IAAI,GAGpBA,EAAO,SAAS,MAAM,EACtBC,EAAM,UAAY,IAHlBD,EAAO,UAAS,EAKX,UAEF,GAAIE,EAAKF,EAAO,IAAI,MAAM,EAE/B,OAAAC,EAAM,MAAQC,EACXA,GAAM,MACPD,EAAM,MAAQ,KAEhBD,EAAO,IAAI,GAAG,EACP,KAEV,CACDA,EAAO,KAAI,CACb,CAEY,MAACG,EAAS,CACpB,WAAY,UAAY,CACtB,MAAO,CAAC,SAAUJ,CAAS,CAC5B,EACD,MAAO,SAAUC,EAAQC,EAAO,CAC9B,OAAOA,EAAM,SAASD,EAAQC,CAAK,CACpC,EACD,aAAc,CACZ,cAAe,CAAC,MAAO,CAAC,KAAM,KAAM,MAAO,IAAI,CAAC,CACjD,CACH"}