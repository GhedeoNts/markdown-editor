{"version":3,"file":"index.a9527aea.js","sources":["../../../node_modules/@codemirror/stream-parser/dist/index.js"],"sourcesContent":["import { NodeType, NodeSet, Parser, NodeProp, Tree } from '@lezer/common';\nimport { tags, styleTags } from '@codemirror/highlight';\nimport { Language, defineLanguageFacet, indentService, syntaxTree, ParseContext, getIndentUnit, languageDataProp } from '@codemirror/language';\n\n// Counts the column offset in a string, taking tabs into account.\n// Used mostly to find indentation.\nfunction countCol(string, end, tabSize, startIndex = 0, startValue = 0) {\n    if (end == null) {\n        end = string.search(/[^\\s\\u00a0]/);\n        if (end == -1)\n            end = string.length;\n    }\n    let n = startValue;\n    for (let i = startIndex; i < end; i++) {\n        if (string.charCodeAt(i) == 9)\n            n += tabSize - (n % tabSize);\n        else\n            n++;\n    }\n    return n;\n}\n/**\nEncapsulates a single line of input. Given to stream syntax code,\nwhich uses it to tokenize the content.\n*/\nclass StringStream {\n    /**\n    @internal\n    */\n    constructor(\n    /**\n    The line.\n    */\n    string, tabSize, \n    /**\n    The current indent unit size.\n    */\n    indentUnit) {\n        this.string = string;\n        this.tabSize = tabSize;\n        this.indentUnit = indentUnit;\n        /**\n        The current position on the line.\n        */\n        this.pos = 0;\n        /**\n        The start position of the current token.\n        */\n        this.start = 0;\n        this.lastColumnPos = 0;\n        this.lastColumnValue = 0;\n    }\n    /**\n    True if we are at the end of the line.\n    */\n    eol() { return this.pos >= this.string.length; }\n    /**\n    True if we are at the start of the line.\n    */\n    sol() { return this.pos == 0; }\n    /**\n    Get the next code unit after the current position, or undefined\n    if we're at the end of the line.\n    */\n    peek() { return this.string.charAt(this.pos) || undefined; }\n    /**\n    Read the next code unit and advance `this.pos`.\n    */\n    next() {\n        if (this.pos < this.string.length)\n            return this.string.charAt(this.pos++);\n    }\n    /**\n    Match the next character against the given string, regular\n    expression, or predicate. Consume and return it if it matches.\n    */\n    eat(match) {\n        let ch = this.string.charAt(this.pos);\n        let ok;\n        if (typeof match == \"string\")\n            ok = ch == match;\n        else\n            ok = ch && (match instanceof RegExp ? match.test(ch) : match(ch));\n        if (ok) {\n            ++this.pos;\n            return ch;\n        }\n    }\n    /**\n    Continue matching characters that match the given string,\n    regular expression, or predicate function. Return true if any\n    characters were consumed.\n    */\n    eatWhile(match) {\n        let start = this.pos;\n        while (this.eat(match)) { }\n        return this.pos > start;\n    }\n    /**\n    Consume whitespace ahead of `this.pos`. Return true if any was\n    found.\n    */\n    eatSpace() {\n        let start = this.pos;\n        while (/[\\s\\u00a0]/.test(this.string.charAt(this.pos)))\n            ++this.pos;\n        return this.pos > start;\n    }\n    /**\n    Move to the end of the line.\n    */\n    skipToEnd() { this.pos = this.string.length; }\n    /**\n    Move to directly before the given character, if found on the\n    current line.\n    */\n    skipTo(ch) {\n        let found = this.string.indexOf(ch, this.pos);\n        if (found > -1) {\n            this.pos = found;\n            return true;\n        }\n    }\n    /**\n    Move back `n` characters.\n    */\n    backUp(n) { this.pos -= n; }\n    /**\n    Get the column position at `this.pos`.\n    */\n    column() {\n        if (this.lastColumnPos < this.start) {\n            this.lastColumnValue = countCol(this.string, this.start, this.tabSize, this.lastColumnPos, this.lastColumnValue);\n            this.lastColumnPos = this.start;\n        }\n        return this.lastColumnValue;\n    }\n    /**\n    Get the indentation column of the current line.\n    */\n    indentation() {\n        return countCol(this.string, null, this.tabSize);\n    }\n    /**\n    Match the input against the given string or regular expression\n    (which should start with a `^`). Return true or the regexp match\n    if it matches.\n    \n    Unless `consume` is set to `false`, this will move `this.pos`\n    past the matched text.\n    \n    When matching a string `caseInsensitive` can be set to true to\n    make the match case-insensitive.\n    */\n    match(pattern, consume, caseInsensitive) {\n        if (typeof pattern == \"string\") {\n            let cased = (str) => caseInsensitive ? str.toLowerCase() : str;\n            let substr = this.string.substr(this.pos, pattern.length);\n            if (cased(substr) == cased(pattern)) {\n                if (consume !== false)\n                    this.pos += pattern.length;\n                return true;\n            }\n            else\n                return null;\n        }\n        else {\n            let match = this.string.slice(this.pos).match(pattern);\n            if (match && match.index > 0)\n                return null;\n            if (match && consume !== false)\n                this.pos += match[0].length;\n            return match;\n        }\n    }\n    /**\n    Get the current token.\n    */\n    current() { return this.string.slice(this.start, this.pos); }\n}\n\nfunction fullParser(spec) {\n    return {\n        token: spec.token,\n        blankLine: spec.blankLine || (() => { }),\n        startState: spec.startState || (() => true),\n        copyState: spec.copyState || defaultCopyState,\n        indent: spec.indent || (() => null),\n        languageData: spec.languageData || {},\n        tokenTable: spec.tokenTable || noTokens\n    };\n}\nfunction defaultCopyState(state) {\n    if (typeof state != \"object\")\n        return state;\n    let newState = {};\n    for (let prop in state) {\n        let val = state[prop];\n        newState[prop] = (val instanceof Array ? val.slice() : val);\n    }\n    return newState;\n}\n/**\nA [language](https://codemirror.net/6/docs/ref/#language.Language) class based on a streaming\nparser.\n*/\nclass StreamLanguage extends Language {\n    constructor(parser) {\n        let data = defineLanguageFacet(parser.languageData);\n        let p = fullParser(parser), self;\n        let impl = new class extends Parser {\n            createParse(input, fragments, ranges) {\n                return new Parse(self, input, fragments, ranges);\n            }\n        };\n        super(data, impl, docID(data), [indentService.of((cx, pos) => this.getIndent(cx, pos))]);\n        self = this;\n        this.streamParser = p;\n        this.stateAfter = new NodeProp({ perNode: true });\n        this.tokenTable = parser.tokenTable ? new TokenTable(p.tokenTable) : defaultTokenTable;\n    }\n    static define(spec) { return new StreamLanguage(spec); }\n    getIndent(cx, pos) {\n        let tree = syntaxTree(cx.state), at = tree.resolve(pos);\n        while (at && at.type != this.topNode)\n            at = at.parent;\n        if (!at)\n            return null;\n        let start = findState(this, tree, 0, at.from, pos), statePos, state;\n        if (start) {\n            state = start.state;\n            statePos = start.pos + 1;\n        }\n        else {\n            state = this.streamParser.startState(cx.unit);\n            statePos = 0;\n        }\n        if (pos - statePos > 10000 /* MaxIndentScanDist */)\n            return null;\n        while (statePos < pos) {\n            let line = cx.state.doc.lineAt(statePos), end = Math.min(pos, line.to);\n            if (line.length) {\n                let stream = new StringStream(line.text, cx.state.tabSize, cx.unit);\n                while (stream.pos < end - line.from)\n                    readToken(this.streamParser.token, stream, state);\n            }\n            else {\n                this.streamParser.blankLine(state, cx.unit);\n            }\n            if (end == pos)\n                break;\n            statePos = line.to + 1;\n        }\n        let { text } = cx.lineAt(pos);\n        return this.streamParser.indent(state, /^\\s*(.*)/.exec(text)[1], cx);\n    }\n    get allowsNesting() { return false; }\n}\nfunction findState(lang, tree, off, startPos, before) {\n    let state = off >= startPos && off + tree.length <= before && tree.prop(lang.stateAfter);\n    if (state)\n        return { state: lang.streamParser.copyState(state), pos: off + tree.length };\n    for (let i = tree.children.length - 1; i >= 0; i--) {\n        let child = tree.children[i], pos = off + tree.positions[i];\n        let found = child instanceof Tree && pos < before && findState(lang, child, pos, startPos, before);\n        if (found)\n            return found;\n    }\n    return null;\n}\nfunction cutTree(lang, tree, from, to, inside) {\n    if (inside && from <= 0 && to >= tree.length)\n        return tree;\n    if (!inside && tree.type == lang.topNode)\n        inside = true;\n    for (let i = tree.children.length - 1; i >= 0; i--) {\n        let pos = tree.positions[i], child = tree.children[i], inner;\n        if (pos < to && child instanceof Tree) {\n            if (!(inner = cutTree(lang, child, from - pos, to - pos, inside)))\n                break;\n            return !inside ? inner\n                : new Tree(tree.type, tree.children.slice(0, i).concat(inner), tree.positions.slice(0, i + 1), pos + inner.length);\n        }\n    }\n    return null;\n}\nfunction findStartInFragments(lang, fragments, startPos, editorState) {\n    for (let f of fragments) {\n        let from = f.from + (f.openStart ? 25 : 0), to = f.to - (f.openEnd ? 25 : 0);\n        let found = from <= startPos && to > startPos && findState(lang, f.tree, 0 - f.offset, startPos, to), tree;\n        if (found && (tree = cutTree(lang, f.tree, startPos + f.offset, found.pos + f.offset, false)))\n            return { state: found.state, tree };\n    }\n    return { state: lang.streamParser.startState(editorState ? getIndentUnit(editorState) : 4), tree: Tree.empty };\n}\nclass Parse {\n    constructor(lang, input, fragments, ranges) {\n        this.lang = lang;\n        this.input = input;\n        this.fragments = fragments;\n        this.ranges = ranges;\n        this.stoppedAt = null;\n        this.chunks = [];\n        this.chunkPos = [];\n        this.chunk = [];\n        this.chunkReused = undefined;\n        this.rangeIndex = 0;\n        this.to = ranges[ranges.length - 1].to;\n        let context = ParseContext.get(), from = ranges[0].from;\n        let { state, tree } = findStartInFragments(lang, fragments, from, context === null || context === void 0 ? void 0 : context.state);\n        this.state = state;\n        this.parsedPos = this.chunkStart = from + tree.length;\n        for (let i = 0; i < tree.children.length; i++) {\n            this.chunks.push(tree.children[i]);\n            this.chunkPos.push(tree.positions[i]);\n        }\n        if (context && this.parsedPos < context.viewport.from - 100000 /* MaxDistanceBeforeViewport */) {\n            this.state = this.lang.streamParser.startState(getIndentUnit(context.state));\n            context.skipUntilInView(this.parsedPos, context.viewport.from);\n            this.parsedPos = context.viewport.from;\n        }\n        this.moveRangeIndex();\n    }\n    advance() {\n        let context = ParseContext.get();\n        let parseEnd = this.stoppedAt == null ? this.to : Math.min(this.to, this.stoppedAt);\n        let end = Math.min(parseEnd, this.chunkStart + 2048 /* ChunkSize */);\n        if (context)\n            end = Math.min(end, context.viewport.to);\n        while (this.parsedPos < end)\n            this.parseLine(context);\n        if (this.chunkStart < this.parsedPos)\n            this.finishChunk();\n        if (this.parsedPos >= parseEnd)\n            return this.finish();\n        if (context && this.parsedPos >= context.viewport.to) {\n            context.skipUntilInView(this.parsedPos, parseEnd);\n            return this.finish();\n        }\n        return null;\n    }\n    stopAt(pos) {\n        this.stoppedAt = pos;\n    }\n    lineAfter(pos) {\n        let chunk = this.input.chunk(pos);\n        if (!this.input.lineChunks) {\n            let eol = chunk.indexOf(\"\\n\");\n            if (eol > -1)\n                chunk = chunk.slice(0, eol);\n        }\n        else if (chunk == \"\\n\") {\n            chunk = \"\";\n        }\n        return pos + chunk.length <= this.to ? chunk : chunk.slice(0, this.to - pos);\n    }\n    nextLine() {\n        let from = this.parsedPos, line = this.lineAfter(from), end = from + line.length;\n        for (let index = this.rangeIndex;;) {\n            let rangeEnd = this.ranges[index].to;\n            if (rangeEnd >= end)\n                break;\n            line = line.slice(0, rangeEnd - (end - line.length));\n            index++;\n            if (index == this.ranges.length)\n                break;\n            let rangeStart = this.ranges[index].from;\n            let after = this.lineAfter(rangeStart);\n            line += after;\n            end = rangeStart + after.length;\n        }\n        return { line, end };\n    }\n    skipGapsTo(pos, offset, side) {\n        for (;;) {\n            let end = this.ranges[this.rangeIndex].to, offPos = pos + offset;\n            if (side > 0 ? end > offPos : end >= offPos)\n                break;\n            let start = this.ranges[++this.rangeIndex].from;\n            offset += start - end;\n        }\n        return offset;\n    }\n    moveRangeIndex() {\n        while (this.ranges[this.rangeIndex].to < this.parsedPos)\n            this.rangeIndex++;\n    }\n    emitToken(id, from, to, size, offset) {\n        if (this.ranges.length > 1) {\n            offset = this.skipGapsTo(from, offset, 1);\n            from += offset;\n            let len0 = this.chunk.length;\n            offset = this.skipGapsTo(to, offset, -1);\n            to += offset;\n            size += this.chunk.length - len0;\n        }\n        this.chunk.push(id, from, to, size);\n        return offset;\n    }\n    parseLine(context) {\n        let { line, end } = this.nextLine(), offset = 0, { streamParser } = this.lang;\n        let stream = new StringStream(line, context ? context.state.tabSize : 4, context ? getIndentUnit(context.state) : 2);\n        if (stream.eol()) {\n            streamParser.blankLine(this.state, stream.indentUnit);\n        }\n        else {\n            while (!stream.eol()) {\n                let token = readToken(streamParser.token, stream, this.state);\n                if (token)\n                    offset = this.emitToken(this.lang.tokenTable.resolve(token), this.parsedPos + stream.start, this.parsedPos + stream.pos, 4, offset);\n                if (stream.start > 10000 /* MaxLineLength */)\n                    break;\n            }\n        }\n        this.parsedPos = end;\n        this.moveRangeIndex();\n        if (this.parsedPos < this.to)\n            this.parsedPos++;\n    }\n    finishChunk() {\n        let tree = Tree.build({\n            buffer: this.chunk,\n            start: this.chunkStart,\n            length: this.parsedPos - this.chunkStart,\n            nodeSet,\n            topID: 0,\n            maxBufferLength: 2048 /* ChunkSize */,\n            reused: this.chunkReused\n        });\n        tree = new Tree(tree.type, tree.children, tree.positions, tree.length, [[this.lang.stateAfter, this.lang.streamParser.copyState(this.state)]]);\n        this.chunks.push(tree);\n        this.chunkPos.push(this.chunkStart - this.ranges[0].from);\n        this.chunk = [];\n        this.chunkReused = undefined;\n        this.chunkStart = this.parsedPos;\n    }\n    finish() {\n        return new Tree(this.lang.topNode, this.chunks, this.chunkPos, this.parsedPos - this.ranges[0].from).balance();\n    }\n}\nfunction readToken(token, stream, state) {\n    stream.start = stream.pos;\n    for (let i = 0; i < 10; i++) {\n        let result = token(stream, state);\n        if (stream.pos > stream.start)\n            return result;\n    }\n    throw new Error(\"Stream parser failed to advance stream.\");\n}\nconst noTokens = /*@__PURE__*/Object.create(null);\nconst typeArray = [NodeType.none];\nconst nodeSet = /*@__PURE__*/new NodeSet(typeArray);\nconst warned = [];\nconst defaultTable = /*@__PURE__*/Object.create(null);\nfor (let [legacyName, name] of [\n    [\"variable\", \"variableName\"],\n    [\"variable-2\", \"variableName.special\"],\n    [\"string-2\", \"string.special\"],\n    [\"def\", \"variableName.definition\"],\n    [\"tag\", \"typeName\"],\n    [\"attribute\", \"propertyName\"],\n    [\"type\", \"typeName\"],\n    [\"builtin\", \"variableName.standard\"],\n    [\"qualifier\", \"modifier\"],\n    [\"error\", \"invalid\"],\n    [\"header\", \"heading\"],\n    [\"property\", \"propertyName\"]\n])\n    defaultTable[legacyName] = /*@__PURE__*/createTokenType(noTokens, name);\nclass TokenTable {\n    constructor(extra) {\n        this.extra = extra;\n        this.table = Object.assign(Object.create(null), defaultTable);\n    }\n    resolve(tag) {\n        return !tag ? 0 : this.table[tag] || (this.table[tag] = createTokenType(this.extra, tag));\n    }\n}\nconst defaultTokenTable = /*@__PURE__*/new TokenTable(noTokens);\nfunction warnForPart(part, msg) {\n    if (warned.indexOf(part) > -1)\n        return;\n    warned.push(part);\n    console.warn(msg);\n}\nfunction createTokenType(extra, tagStr) {\n    let tag = null;\n    for (let part of tagStr.split(\".\")) {\n        let value = (extra[part] || tags[part]);\n        if (!value) {\n            warnForPart(part, `Unknown highlighting tag ${part}`);\n        }\n        else if (typeof value == \"function\") {\n            if (!tag)\n                warnForPart(part, `Modifier ${part} used at start of tag`);\n            else\n                tag = value(tag);\n        }\n        else {\n            if (tag)\n                warnForPart(part, `Tag ${part} used as modifier`);\n            else\n                tag = value;\n        }\n    }\n    if (!tag)\n        return 0;\n    let name = tagStr.replace(/ /g, \"_\"), type = NodeType.define({\n        id: typeArray.length,\n        name,\n        props: [styleTags({ [name]: tag })]\n    });\n    typeArray.push(type);\n    return type.id;\n}\nfunction docID(data) {\n    let type = NodeType.define({ id: typeArray.length, name: \"Document\", props: [languageDataProp.add(() => data)] });\n    typeArray.push(type);\n    return type;\n}\n\nexport { StreamLanguage, StringStream };\n"],"names":["countCol","string","end","tabSize","startIndex","startValue","n","i","StringStream","indentUnit","match","ch","ok","start","found","pattern","consume","caseInsensitive","cased","str","substr","fullParser","spec","defaultCopyState","noTokens","state","newState","prop","val","StreamLanguage","Language","parser","data","defineLanguageFacet","p","self","impl","Parser","input","fragments","ranges","Parse","docID","indentService","cx","pos","NodeProp","TokenTable","defaultTokenTable","tree","syntaxTree","at","findState","statePos","line","stream","readToken","text","lang","off","startPos","before","child","Tree","cutTree","from","to","inside","inner","findStartInFragments","editorState","f","getIndentUnit","context","ParseContext","parseEnd","chunk","eol","index","rangeEnd","rangeStart","after","offset","side","offPos","id","size","len0","streamParser","token","nodeSet","result","typeArray","NodeType","NodeSet","warned","defaultTable","legacyName","name","createTokenType","extra","tag","warnForPart","part","msg","tagStr","value","tags","type","styleTags","languageDataProp"],"mappings":"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"}